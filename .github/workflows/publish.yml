name: Publish

on:
  push:
    branches:
      - "master"
    tags:
      - "*"
  pull_request:
    branches:
      - "master"

permissions:
  contents: read

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    name: Go Version ${{ matrix.go }}
    permissions:
      actions: read
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v3

      - name: Fake build
        run: |
          mkdir dist
          cd dist
          echo -en "12345" > output1
          echo -en "abcde" > output2

      - name: "Generate hashes"
        id: hash
        run: |
          cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

      - name: Install sigstore
        run: |
          python -m pip install sigstore requests

      - uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: dist/output1 dist/output2

      - name: Get OIDC token
        id: get-oidc-token
        env:
          SIGSTORE_STS_CLIENT_SECRET: ${{ secrets.SIGSTORE_STS_CLIENT_SECRET }}
        run: |
          identity_token=$( \
            curl -H \
              "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
              "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sigstore" \
            | jq -r .value \
          )
          echo "identity-token=$identity_token" >> $GITHUB_OUTPUT
          echo "$identity_token"
          echo "$identity_token" | base64
          access_token=$( \
            curl 'https://sigstore.verify.ibm.com/oauth2/token' \
                --header 'Content-Type: application/x-www-form-urlencoded' \
                --data-urlencode 'client_id=sigstore' \
                --data-urlencode "client_secret=${SIGSTORE_STS_CLIENT_SECRET}" \
                --data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange' \
                --data-urlencode "subject_token=${identity_token}" \
                --data-urlencode 'subject_token_type=GitHubIdentityToken' -s \
            | jq -r .access_token \
          )
          echo "ibm-identity-token=$access_token" >> $GITHUB_OUTPUT

      - name: Sign artifact with sigstore
        run: |
          python -m sigstore sign --identity-token ${{ steps.get-oidc-token.outputs.identity-token }} dist/output1 --bundle dist/output1.sigstore-plain.json
          python -m sigstore sign --identity-token ${{ steps.get-oidc-token.outputs.identity-token }} dist/output2 --bundle dist/output2.sigstore-plain.json
          python -m sigstore sign --identity-token ${{ steps.get-oidc-token.outputs.ibm-identity-token }} dist/output1 --bundle dist/output1.sigstore-plain-ibm-signed.json
          python -m sigstore sign --identity-token ${{ steps.get-oidc-token.outputs.ibm-identity-token }} dist/output2 --bundle dist/output2.sigstore-plain-ibm-signed.json

      - name: Install cosign
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        run: |
          curl -sSfL 'https://drive.usercontent.google.com/download?id=1moZgK6_REb4YqVv2wo0OgHUdm2gqkfWy&export=download&authuser=0&confirm=t&uuid=b9bd156f-0df0-43d5-b3a1-dda4e63e5605&at=AENtkXZ7-xqbsEb4dhlSeclxvqEK:1733263724683' --output cosign
          chmod 755 cosign
          COSIGN_PASSWORD=123456 ./cosign public-key   --key env://COSIGN_PRIVATE_KEY              --outfile dist/cosign.pub
          COSIGN_PASSWORD=123456 ./cosign sign-blob -y --key env://COSIGN_PRIVATE_KEY dist/output1 --bundle  dist/output1.bundle
          COSIGN_PASSWORD=123456 ./cosign sign-blob -y --key env://COSIGN_PRIVATE_KEY dist/output2 --bundle  dist/output2.bundle

      - name: "Upload dists"
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
        with:
          name: "dist"
          path: "dist/"
          if-no-files-found: error


  provenance:
    needs: [build]
    permissions:
      actions: read
      contents: write
      id-token: write # Needed to access the workflow's OIDC identity.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true

  publish-to-github:
    name: "Publish to github"
    needs: ["build", "provenance"]
    permissions:
      contents: write
      id-token: write
    runs-on: "ubuntu-latest"
    environment:
      name: "publish"

    steps:
      - name: "Download dists"
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: "dist"
          path: "dist/"

      - name: "Upload dists to GitHub Release"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          gh release upload ${{ github.ref_name }} dist/* --repo ${{ github.repository }}
